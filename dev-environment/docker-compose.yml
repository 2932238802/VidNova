networks:
  dev-network:
    driver: bridge
services:
  dev-environment:
    image: crpi-50dgs1uofzodc9pn.cn-chengdu.personal.cr.aliyuncs.com/dev-envronment/dev-environment:1.0
    container_name: dev-env-service
    volumes: 
      - /etc/localtime:/etc/localtime:ro
      # 将程序源码目录，配置文件目录，日志目录，以及二进制目录映射出来
      - ./dev-environment/workspace:/home/dev/workspace
    # environment:
    ports:
      - "2222:22"
      - "9000:9000"
      - "9001:9001"
      - "9002:9002"
      - "9003:9003"
      - "9004:9004"
    restart: always
    privileged: true
    networks:
      - dev-network
  dev-mysql:
    image: crpi-50dgs1uofzodc9pn.cn-chengdu.personal.cr.aliyuncs.com/dev-envronment/mysql:8.0.40
    container_name: mysql-service
    volumes: 
      - ./mysql/my.cnf:/etc/my.cnf
      - ./mysql/sql.d/:/docker-entrypoint-initdb.d/
      - /etc/localtime:/etc/localtime:ro #与宿主机时钟同步，避免时间的问题
    environment:
      TZ: Asia/Shanghai
      MYSQL_ROOT_PASSWORD: 123456
    healthcheck:
      test: mysql --user=root --password='123456' -e "SELECT 1;" #健康检测返回码为0表是成功，非0表示失败
      start_period: 30s #启动预留时间，即30s内的启动失败不计算在超时次数之内
      interval: 10s #每隔10s进行一次检测
      timeout: 5s #健康检测超时时间
      retries: 10 #健康检测重试次数
    ports:
      - "3306:3306"
    restart: always
    privileged: true #给与容器root权限，但是在这里没什么用
    networks:
      - dev-network
  dev-redis:
    image: crpi-50dgs1uofzodc9pn.cn-chengdu.personal.cr.aliyuncs.com/dev-envronment/redis:7.4.1
    container_name: redis-service
    volumes: 
      - ./redis/redis.conf:/usr/local/etc/redis.conf
      - /etc/localtime:/etc/localtime:ro
    command: redis-server /usr/local/etc/redis.conf
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "6379:6379"
    restart: always
    privileged: true
    networks:
      - dev-network
  dev-rabbitmq:
    image: crpi-50dgs1uofzodc9pn.cn-chengdu.personal.cr.aliyuncs.com/dev-envronment/rabbitmq:4.0
    container_name: rabbitmq-service
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: 123456
    volumes: 
      - ./rabbitmq/20-management_agent.disable_metrics_collector.conf:/etc/rabbitmq/conf.d/20-management_agent.disable_metrics_collector.conf
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always
    networks:
      - dev-network
    #rabbitmq-plugins enable rabbitmq_management  开启web管理
  dev-elasticsearch:
    image: crpi-50dgs1uofzodc9pn.cn-chengdu.personal.cr.aliyuncs.com/dev-envronment/elasticsearch:7.17.18
    container_name: elasticsearch-service
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "ELASTIC_PASSWORD=123456"
    volumes: 
      - /etc/localtime:/etc/localtime:ro
      - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./elasticsearch/plugins:/usr/share/elasticsearch/plugins
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://dev-elasticsearch:9200/_cluster/health" ]
      start_period: 30s
      retries: 10
      interval: 5s
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: always
    privileged: true
    networks:
      - dev-network

  dev-kibana:
    image: crpi-50dgs1uofzodc9pn.cn-chengdu.personal.cr.aliyuncs.com/dev-envronment/kibana:7.17.18
    container_name: kibana-service
    environment:
      - "I18N_LOCALE=zh-CN"
      - "ELASTICSEARCH_HOSTS=http://dev-elasticsearch:9200"
    volumes: 
      - /etc/localtime:/etc/localtime:ro
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - "5601:5601"
    restart: always
    depends_on:
      dev-elasticsearch:
        condition: service_healthy
    privileged: true
    networks:
      - dev-network
  dev-etcd:
    image: crpi-50dgs1uofzodc9pn.cn-chengdu.personal.cr.aliyuncs.com/dev-envronment/etcd:3.5.12
    container_name: etcd-service
    volumes: 
      - /etc/localtime:/etc/localtime:ro
    environment:
      - ETCDCTL_API=3
      - ETCD_NAME=etcd-s1
      - ETCD_DATA_DIR=/var/lib/etcd
      # 指定服务器端的监听地址-决定了是否可被外部访问
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      # 集群时对外通告的访问地址
      - ETCD_ADVERTISE_CLIENT_URLS=http://dev-etcd:2379
    ports:
      - "2379:2379"
      - "2380:2380" #这里没用到，这个是分布式同伴间的访问端口
    restart: always
    privileged: true
    networks:
      - dev-network
  dev-storage:
    image: crpi-50dgs1uofzodc9pn.cn-chengdu.personal.cr.aliyuncs.com/dev-envronment/fastdfs:6.12.2
    container_name: fdfs-storage-service
    environment:
      - TRACKER_SERVER_ADDR=dev-tracker
      - TRACKER_SERVER_PORT=22122
      - STORAGE_SERVER_PORT=23000
    command: "storage"
    ports:
      - "23000:23000"
    restart: always
    privileged: true
    networks:
      - dev-network
  dev-tracker:
    image: crpi-50dgs1uofzodc9pn.cn-chengdu.personal.cr.aliyuncs.com/dev-envronment/fastdfs:6.12.2
    container_name: fdfs-tracker-service
    environment:
      - TRACKER_SERVER_PORT=22122
    command: "tracker"
    ports:
      - "22122:22122"
    restart: always
    privileged: true
    networks:
      - dev-network
